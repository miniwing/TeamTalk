// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Regist.proto

#ifndef PROTOBUF_IM_2eRegist_2eproto__INCLUDED
#define PROTOBUF_IM_2eRegist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Regist {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eRegist_2eproto();
void protobuf_AssignDesc_IM_2eRegist_2eproto();
void protobuf_ShutdownFile_IM_2eRegist_2eproto();

class IMMsgServReq;
class IMMsgServRsp;
class IMRegistReq;
class IMRegistRes;
class IMDeviceTokenReq;
class IMDeviceTokenRsp;

// ===================================================================

class IMMsgServReq : public ::google::protobuf::MessageLite {
 public:
  IMMsgServReq();
  virtual ~IMMsgServReq();

  IMMsgServReq(const IMMsgServReq& from);

  inline IMMsgServReq& operator=(const IMMsgServReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServReq* other);

  // implements Message ----------------------------------------------

  IMMsgServReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServReq& from);
  void MergeFrom(const IMMsgServReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Regist.IMMsgServReq)
 private:

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServReq* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgServRsp : public ::google::protobuf::MessageLite {
 public:
  IMMsgServRsp();
  virtual ~IMMsgServRsp();

  IMMsgServRsp(const IMMsgServRsp& from);

  inline IMMsgServRsp& operator=(const IMMsgServRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMMsgServRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMMsgServRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMMsgServRsp* other);

  // implements Message ----------------------------------------------

  IMMsgServRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgServRsp& from);
  void MergeFrom(const IMMsgServRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .IM.BaseDefine.ResultType result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // optional string prior_ip = 2;
  inline bool has_prior_ip() const;
  inline void clear_prior_ip();
  static const int kPriorIpFieldNumber = 2;
  inline const ::std::string& prior_ip() const;
  inline void set_prior_ip(const ::std::string& value);
  inline void set_prior_ip(const char* value);
  inline void set_prior_ip(const char* value, size_t size);
  inline ::std::string* mutable_prior_ip();
  inline ::std::string* release_prior_ip();
  inline void set_allocated_prior_ip(::std::string* prior_ip);

  // optional string backip_ip = 3;
  inline bool has_backip_ip() const;
  inline void clear_backip_ip();
  static const int kBackipIpFieldNumber = 3;
  inline const ::std::string& backip_ip() const;
  inline void set_backip_ip(const ::std::string& value);
  inline void set_backip_ip(const char* value);
  inline void set_backip_ip(const char* value, size_t size);
  inline ::std::string* mutable_backip_ip();
  inline ::std::string* release_backip_ip();
  inline void set_allocated_backip_ip(::std::string* backip_ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Regist.IMMsgServRsp)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_prior_ip();
  inline void clear_has_prior_ip();
  inline void set_has_backip_ip();
  inline void clear_has_backip_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* prior_ip_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  ::std::string* backip_ip_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMMsgServRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMRegistReq : public ::google::protobuf::MessageLite {
 public:
  IMRegistReq();
  virtual ~IMRegistReq();

  IMRegistReq(const IMRegistReq& from);

  inline IMRegistReq& operator=(const IMRegistReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRegistReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRegistReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRegistReq* other);

  // implements Message ----------------------------------------------

  IMRegistReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRegistReq& from);
  void MergeFrom(const IMRegistReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required .IM.BaseDefine.UserStatType online_status = 3;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 3;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // required .IM.BaseDefine.ClientType client_type = 4;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // optional string client_version = 5;
  inline bool has_client_version() const;
  inline void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  inline const ::std::string& client_version() const;
  inline void set_client_version(const ::std::string& value);
  inline void set_client_version(const char* value);
  inline void set_client_version(const char* value, size_t size);
  inline ::std::string* mutable_client_version();
  inline ::std::string* release_client_version();
  inline void set_allocated_client_version(::std::string* client_version);

  // @@protoc_insertion_point(class_scope:IM.Regist.IMRegistReq)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_client_version();
  inline void clear_has_client_version();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_name_;
  ::std::string* password_;
  int online_status_;
  int client_type_;
  ::std::string* client_version_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMRegistReq* default_instance_;
};
// -------------------------------------------------------------------

class IMRegistRes : public ::google::protobuf::MessageLite {
 public:
  IMRegistRes();
  virtual ~IMRegistRes();

  IMRegistRes(const IMRegistRes& from);

  inline IMRegistRes& operator=(const IMRegistRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMRegistRes& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMRegistRes* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMRegistRes* other);

  // implements Message ----------------------------------------------

  IMRegistRes* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMRegistRes& from);
  void MergeFrom(const IMRegistRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_time = 1;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ResultType result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline ::IM::BaseDefine::ResultType result_code() const;
  inline void set_result_code(::IM::BaseDefine::ResultType value);

  // optional string result_string = 3;
  inline bool has_result_string() const;
  inline void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  inline const ::std::string& result_string() const;
  inline void set_result_string(const ::std::string& value);
  inline void set_result_string(const char* value);
  inline void set_result_string(const char* value, size_t size);
  inline ::std::string* mutable_result_string();
  inline ::std::string* release_result_string();
  inline void set_allocated_result_string(::std::string* result_string);

  // optional .IM.BaseDefine.UserStatType online_status = 4;
  inline bool has_online_status() const;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 4;
  inline ::IM::BaseDefine::UserStatType online_status() const;
  inline void set_online_status(::IM::BaseDefine::UserStatType value);

  // optional .IM.BaseDefine.UserInfo user_info = 5;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  inline const ::IM::BaseDefine::UserInfo& user_info() const;
  inline ::IM::BaseDefine::UserInfo* mutable_user_info();
  inline ::IM::BaseDefine::UserInfo* release_user_info();
  inline void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // @@protoc_insertion_point(class_scope:IM.Regist.IMRegistRes)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_string();
  inline void clear_has_result_string();
  inline void set_has_online_status();
  inline void clear_has_online_status();
  inline void set_has_user_info();
  inline void clear_has_user_info();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 server_time_;
  int result_code_;
  ::std::string* result_string_;
  ::IM::BaseDefine::UserInfo* user_info_;
  int online_status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMRegistRes* default_instance_;
};
// -------------------------------------------------------------------

class IMDeviceTokenReq : public ::google::protobuf::MessageLite {
 public:
  IMDeviceTokenReq();
  virtual ~IMDeviceTokenReq();

  IMDeviceTokenReq(const IMDeviceTokenReq& from);

  inline IMDeviceTokenReq& operator=(const IMDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDeviceTokenReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDeviceTokenReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDeviceTokenReq* other);

  // implements Message ----------------------------------------------

  IMDeviceTokenReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDeviceTokenReq& from);
  void MergeFrom(const IMDeviceTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string device_token = 2;
  inline bool has_device_token() const;
  inline void clear_device_token();
  static const int kDeviceTokenFieldNumber = 2;
  inline const ::std::string& device_token() const;
  inline void set_device_token(const ::std::string& value);
  inline void set_device_token(const char* value);
  inline void set_device_token(const char* value, size_t size);
  inline ::std::string* mutable_device_token();
  inline ::std::string* release_device_token();
  inline void set_allocated_device_token(::std::string* device_token);

  // optional .IM.BaseDefine.ClientType client_type = 3;
  inline bool has_client_type() const;
  inline void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  inline ::IM::BaseDefine::ClientType client_type() const;
  inline void set_client_type(::IM::BaseDefine::ClientType value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Regist.IMDeviceTokenReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_token();
  inline void clear_has_device_token();
  inline void set_has_client_type();
  inline void clear_has_client_type();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* device_token_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMDeviceTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class IMDeviceTokenRsp : public ::google::protobuf::MessageLite {
 public:
  IMDeviceTokenRsp();
  virtual ~IMDeviceTokenRsp();

  IMDeviceTokenRsp(const IMDeviceTokenRsp& from);

  inline IMDeviceTokenRsp& operator=(const IMDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMDeviceTokenRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMDeviceTokenRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMDeviceTokenRsp* other);

  // implements Message ----------------------------------------------

  IMDeviceTokenRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMDeviceTokenRsp& from);
  void MergeFrom(const IMDeviceTokenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Regist.IMDeviceTokenRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eRegist_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eRegist_2eproto();
  friend void protobuf_ShutdownFile_IM_2eRegist_2eproto();

  void InitAsDefaultInstance();
  static IMDeviceTokenRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMMsgServReq

// -------------------------------------------------------------------

// IMMsgServRsp

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMMsgServRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMMsgServRsp.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMMsgServRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMMsgServRsp.result_code)
}

// optional string prior_ip = 2;
inline bool IMMsgServRsp::has_prior_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServRsp::set_has_prior_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServRsp::clear_has_prior_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServRsp::clear_prior_ip() {
  if (prior_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_ip_->clear();
  }
  clear_has_prior_ip();
}
inline const ::std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMMsgServRsp.prior_ip)
  return *prior_ip_;
}
inline void IMMsgServRsp::set_prior_ip(const ::std::string& value) {
  set_has_prior_ip();
  if (prior_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_ip_ = new ::std::string;
  }
  prior_ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMMsgServRsp.prior_ip)
}
inline void IMMsgServRsp::set_prior_ip(const char* value) {
  set_has_prior_ip();
  if (prior_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_ip_ = new ::std::string;
  }
  prior_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMMsgServRsp.prior_ip)
}
inline void IMMsgServRsp::set_prior_ip(const char* value, size_t size) {
  set_has_prior_ip();
  if (prior_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_ip_ = new ::std::string;
  }
  prior_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMMsgServRsp.prior_ip)
}
inline ::std::string* IMMsgServRsp::mutable_prior_ip() {
  set_has_prior_ip();
  if (prior_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prior_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMMsgServRsp.prior_ip)
  return prior_ip_;
}
inline ::std::string* IMMsgServRsp::release_prior_ip() {
  clear_has_prior_ip();
  if (prior_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prior_ip_;
    prior_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRsp::set_allocated_prior_ip(::std::string* prior_ip) {
  if (prior_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prior_ip_;
  }
  if (prior_ip) {
    set_has_prior_ip();
    prior_ip_ = prior_ip;
  } else {
    clear_has_prior_ip();
    prior_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMMsgServRsp.prior_ip)
}

// optional string backip_ip = 3;
inline bool IMMsgServRsp::has_backip_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServRsp::set_has_backip_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServRsp::clear_has_backip_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServRsp::clear_backip_ip() {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_->clear();
  }
  clear_has_backip_ip();
}
inline const ::std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMMsgServRsp.backip_ip)
  return *backip_ip_;
}
inline void IMMsgServRsp::set_backip_ip(const ::std::string& value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMMsgServRsp.backip_ip)
}
inline void IMMsgServRsp::set_backip_ip(const char* value) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMMsgServRsp.backip_ip)
}
inline void IMMsgServRsp::set_backip_ip(const char* value, size_t size) {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  backip_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMMsgServRsp.backip_ip)
}
inline ::std::string* IMMsgServRsp::mutable_backip_ip() {
  set_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backip_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMMsgServRsp.backip_ip)
  return backip_ip_;
}
inline ::std::string* IMMsgServRsp::release_backip_ip() {
  clear_has_backip_ip();
  if (backip_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backip_ip_;
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMMsgServRsp::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backip_ip_;
  }
  if (backip_ip) {
    set_has_backip_ip();
    backip_ip_ = backip_ip;
  } else {
    clear_has_backip_ip();
    backip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMMsgServRsp.backip_ip)
}

// optional uint32 port = 4;
inline bool IMMsgServRsp::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServRsp::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServRsp::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMMsgServRsp.port)
  return port_;
}
inline void IMMsgServRsp::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMMsgServRsp.port)
}

// -------------------------------------------------------------------

// IMRegistReq

// required string user_name = 1;
inline bool IMRegistReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRegistReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRegistReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRegistReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& IMRegistReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistReq.user_name)
  return *user_name_;
}
inline void IMRegistReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistReq.user_name)
}
inline void IMRegistReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMRegistReq.user_name)
}
inline void IMRegistReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMRegistReq.user_name)
}
inline ::std::string* IMRegistReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMRegistReq.user_name)
  return user_name_;
}
inline ::std::string* IMRegistReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRegistReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMRegistReq.user_name)
}

// required string password = 2;
inline bool IMRegistReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRegistReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRegistReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRegistReq::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& IMRegistReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistReq.password)
  return *password_;
}
inline void IMRegistReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistReq.password)
}
inline void IMRegistReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMRegistReq.password)
}
inline void IMRegistReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMRegistReq.password)
}
inline ::std::string* IMRegistReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMRegistReq.password)
  return password_;
}
inline ::std::string* IMRegistReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRegistReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMRegistReq.password)
}

// required .IM.BaseDefine.UserStatType online_status = 3;
inline bool IMRegistReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRegistReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRegistReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRegistReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMRegistReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistReq.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMRegistReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistReq.online_status)
}

// required .IM.BaseDefine.ClientType client_type = 4;
inline bool IMRegistReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRegistReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRegistReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRegistReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMRegistReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMRegistReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistReq.client_type)
}

// optional string client_version = 5;
inline bool IMRegistReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMRegistReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMRegistReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMRegistReq::clear_client_version() {
  if (client_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_->clear();
  }
  clear_has_client_version();
}
inline const ::std::string& IMRegistReq::client_version() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistReq.client_version)
  return *client_version_;
}
inline void IMRegistReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistReq.client_version)
}
inline void IMRegistReq::set_client_version(const char* value) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMRegistReq.client_version)
}
inline void IMRegistReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  client_version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMRegistReq.client_version)
}
inline ::std::string* IMRegistReq::mutable_client_version() {
  set_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMRegistReq.client_version)
  return client_version_;
}
inline ::std::string* IMRegistReq::release_client_version() {
  clear_has_client_version();
  if (client_version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_version_;
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRegistReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_version_;
  }
  if (client_version) {
    set_has_client_version();
    client_version_ = client_version;
  } else {
    clear_has_client_version();
    client_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMRegistReq.client_version)
}

// -------------------------------------------------------------------

// IMRegistRes

// required uint32 server_time = 1;
inline bool IMRegistRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMRegistRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMRegistRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMRegistRes::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 IMRegistRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistRes.server_time)
  return server_time_;
}
inline void IMRegistRes::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistRes.server_time)
}

// required .IM.BaseDefine.ResultType result_code = 2;
inline bool IMRegistRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMRegistRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMRegistRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMRegistRes::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMRegistRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMRegistRes::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistRes.result_code)
}

// optional string result_string = 3;
inline bool IMRegistRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMRegistRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMRegistRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMRegistRes::clear_result_string() {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_->clear();
  }
  clear_has_result_string();
}
inline const ::std::string& IMRegistRes::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistRes.result_string)
  return *result_string_;
}
inline void IMRegistRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistRes.result_string)
}
inline void IMRegistRes::set_result_string(const char* value) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMRegistRes.result_string)
}
inline void IMRegistRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  result_string_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMRegistRes.result_string)
}
inline ::std::string* IMRegistRes::mutable_result_string() {
  set_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_string_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMRegistRes.result_string)
  return result_string_;
}
inline ::std::string* IMRegistRes::release_result_string() {
  clear_has_result_string();
  if (result_string_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_string_;
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMRegistRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_string_;
  }
  if (result_string) {
    set_has_result_string();
    result_string_ = result_string;
  } else {
    clear_has_result_string();
    result_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMRegistRes.result_string)
}

// optional .IM.BaseDefine.UserStatType online_status = 4;
inline bool IMRegistRes::has_online_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMRegistRes::set_has_online_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMRegistRes::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMRegistRes::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMRegistRes::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistRes.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMRegistRes::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMRegistRes.online_status)
}

// optional .IM.BaseDefine.UserInfo user_info = 5;
inline bool IMRegistRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMRegistRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMRegistRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMRegistRes::clear_user_info() {
  if (user_info_ != NULL) user_info_->::IM::BaseDefine::UserInfo::Clear();
  clear_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMRegistRes::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMRegistRes.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
inline ::IM::BaseDefine::UserInfo* IMRegistRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::IM::BaseDefine::UserInfo;
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMRegistRes.user_info)
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMRegistRes::release_user_info() {
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void IMRegistRes::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMRegistRes.user_info)
}

// -------------------------------------------------------------------

// IMDeviceTokenReq

// required uint32 user_id = 1;
inline bool IMDeviceTokenReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenReq.user_id)
  return user_id_;
}
inline void IMDeviceTokenReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenReq.user_id)
}

// required string device_token = 2;
inline bool IMDeviceTokenReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenReq::clear_device_token() {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_->clear();
  }
  clear_has_device_token();
}
inline const ::std::string& IMDeviceTokenReq::device_token() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenReq.device_token)
  return *device_token_;
}
inline void IMDeviceTokenReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenReq.device_token)
}
inline void IMDeviceTokenReq::set_device_token(const char* value) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMDeviceTokenReq.device_token)
}
inline void IMDeviceTokenReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  device_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMDeviceTokenReq.device_token)
}
inline ::std::string* IMDeviceTokenReq::mutable_device_token() {
  set_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMDeviceTokenReq.device_token)
  return device_token_;
}
inline ::std::string* IMDeviceTokenReq::release_device_token() {
  clear_has_device_token();
  if (device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_token_;
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_token_;
  }
  if (device_token) {
    set_has_device_token();
    device_token_ = device_token;
  } else {
    clear_has_device_token();
    device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMDeviceTokenReq.device_token)
}

// optional .IM.BaseDefine.ClientType client_type = 3;
inline bool IMDeviceTokenReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDeviceTokenReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDeviceTokenReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDeviceTokenReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMDeviceTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMDeviceTokenReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenReq.client_type)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDeviceTokenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDeviceTokenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDeviceTokenReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenReq.attach_data)
  return *attach_data_;
}
inline void IMDeviceTokenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenReq.attach_data)
}
inline void IMDeviceTokenReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMDeviceTokenReq.attach_data)
}
inline void IMDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMDeviceTokenReq.attach_data)
}
inline ::std::string* IMDeviceTokenReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMDeviceTokenReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMDeviceTokenReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMDeviceTokenRsp

// required uint32 user_id = 1;
inline bool IMDeviceTokenRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenRsp.user_id)
  return user_id_;
}
inline void IMDeviceTokenRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenRsp.user_id)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Regist.IMDeviceTokenRsp.attach_data)
  return *attach_data_;
}
inline void IMDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Regist.IMDeviceTokenRsp.attach_data)
}
inline void IMDeviceTokenRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Regist.IMDeviceTokenRsp.attach_data)
}
inline void IMDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Regist.IMDeviceTokenRsp.attach_data)
}
inline ::std::string* IMDeviceTokenRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Regist.IMDeviceTokenRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMDeviceTokenRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Regist.IMDeviceTokenRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Regist
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eRegist_2eproto__INCLUDED
